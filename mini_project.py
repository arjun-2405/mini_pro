# -*- coding: utf-8 -*-
"""mini_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uBgU-Ds6q9rS3siA31kAIv8e4NY_6zhg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import classification_report, confusion_matrix

import pandas
from google.colab import drive
drive.mount('/content/gdrive')
csvfile = '/content/gdrive/MyDrive/material_desc.csv'
df=pd.read_csv(csvfile)
df = df.dropna()
df.head()

df.describe()

X = df[['Hardness', 'Toughness', 'Density (g/cmÂ³)', 'Yield Stress (MPa)']]
y = df['Application']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

le = LabelEncoder()
y_encoded = le.fit_transform(y)

num_classes = len(np.unique(y))
y_one_hot = to_categorical(y_encoded, num_classes=num_classes)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_one_hot, test_size=0.2, random_state=42)

model = Sequential([
    Dense(12, activation='relu', input_dim=4),
    Dense(8, activation='relu'),
    Dense(4, activation='softmax')  # 3 output classes
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

mlp = model.fit(X_train, y_train, epochs=200, batch_size=5, validation_data=(X_test, y_test))

loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")

import matplotlib.pyplot as plt
plt.plot(mlp.history['accuracy'], label='Train Accuracy')
plt.plot(mlp.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Accuracy vs. Epoch')
plt.legend()
plt.show()

y_pred_probs = model.predict(X_test)  #  probability distributions
y_pred_classes = np.argmax(y_pred_probs, axis=1)  # Convert to class labels

# Convert y_test from one-hot to class labels
y_test_classes = np.argmax(y_test, axis=1)

print("\nClassification Report:")
print(classification_report(y_test_classes, y_pred_classes, target_names=le.classes_))

cm = confusion_matrix(y_test_classes, y_pred_classes)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

print("Confusion Matrix:\n", cm)

import pickle
mini_model = 'mini_project_model.pkl'
pickle.dump(model, open(mini_model, 'wb'))

import pickle
loaded_model=pickle.load(open('mini_project_model.pkl', 'rb'))

row_last = X.iloc[-1]
print(row_last)

new_data = np.array([[10,1,1,2000]])
prediction = loaded_model.predict(new_data)
print(prediction)

predicted_classes = np.argmax(prediction, axis=1)
print("Predicted Classes:", predicted_classes)